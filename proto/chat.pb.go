// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/chat.proto

package chatpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7e7dde45555b7d, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SendRequest struct {
	Msg                  *Message `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRequest) Reset()         { *m = SendRequest{} }
func (m *SendRequest) String() string { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()    {}
func (*SendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7e7dde45555b7d, []int{1}
}

func (m *SendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRequest.Unmarshal(m, b)
}
func (m *SendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRequest.Marshal(b, m, deterministic)
}
func (m *SendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRequest.Merge(m, src)
}
func (m *SendRequest) XXX_Size() int {
	return xxx_messageInfo_SendRequest.Size(m)
}
func (m *SendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendRequest proto.InternalMessageInfo

func (m *SendRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type ReceiveResponse struct {
	Msg                  *Message `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceiveResponse) Reset()         { *m = ReceiveResponse{} }
func (m *ReceiveResponse) String() string { return proto.CompactTextString(m) }
func (*ReceiveResponse) ProtoMessage()    {}
func (*ReceiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7e7dde45555b7d, []int{2}
}

func (m *ReceiveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveResponse.Unmarshal(m, b)
}
func (m *ReceiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveResponse.Marshal(b, m, deterministic)
}
func (m *ReceiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveResponse.Merge(m, src)
}
func (m *ReceiveResponse) XXX_Size() int {
	return xxx_messageInfo_ReceiveResponse.Size(m)
}
func (m *ReceiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveResponse proto.InternalMessageInfo

func (m *ReceiveResponse) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*SendRequest)(nil), "chat.SendRequest")
	proto.RegisterType((*ReceiveResponse)(nil), "chat.ReceiveResponse")
}

func init() { proto.RegisterFile("proto/chat.proto", fileDescriptor_ed7e7dde45555b7d) }

var fileDescriptor_ed7e7dde45555b7d = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xb7, 0xba, 0x6c, 0xd7, 0x29, 0xa2, 0x0e, 0x28, 0xa5, 0x1e, 0x94, 0x9c, 0x3c, 0xa5,
	0xd2, 0xbd, 0x0a, 0x82, 0xe2, 0xd1, 0x4b, 0xf6, 0xe6, 0xad, 0xad, 0x63, 0xb6, 0x68, 0xfe, 0xb8,
	0xc9, 0x2e, 0x78, 0xf3, 0xa3, 0x4b, 0x92, 0xad, 0x88, 0x20, 0xde, 0x66, 0xf2, 0xde, 0xcb, 0x6f,
	0x1e, 0x1c, 0xdb, 0xb5, 0xf1, 0xa6, 0xee, 0x57, 0xad, 0xe7, 0x71, 0xc4, 0x69, 0x98, 0xab, 0x73,
	0x69, 0x8c, 0x7c, 0xa3, 0x3a, 0xbe, 0x75, 0x9b, 0x97, 0x9a, 0x94, 0xf5, 0x1f, 0xc9, 0xc2, 0x6e,
	0x21, 0x7f, 0x24, 0xe7, 0x5a, 0x49, 0x58, 0xc1, 0x5c, 0x0f, 0xfd, 0xab, 0x6e, 0x15, 0x95, 0xd9,
	0x65, 0x76, 0x75, 0x20, 0xbe, 0x77, 0x2c, 0x21, 0x57, 0xc9, 0x56, 0xee, 0x45, 0x69, 0x5c, 0x19,
	0x87, 0x62, 0x49, 0xfa, 0x59, 0xd0, 0xfb, 0x86, 0x9c, 0xc7, 0x0b, 0xd8, 0x57, 0x4e, 0xc6, 0x7c,
	0xd1, 0x1c, 0xf2, 0x78, 0xcc, 0x0e, 0x20, 0x82, 0xc2, 0x1a, 0x38, 0x12, 0xd4, 0xd3, 0xb0, 0x25,
	0x41, 0xce, 0x1a, 0xed, 0xe8, 0xdf, 0x4c, 0xf3, 0x99, 0x41, 0x71, 0xbf, 0x6a, 0xfd, 0x92, 0xd6,
	0xdb, 0xa1, 0x27, 0x5c, 0xc0, 0x34, 0x30, 0xf1, 0x24, 0x79, 0x7f, 0xf0, 0xab, 0x33, 0x9e, 0xda,
	0xf2, 0xb1, 0x2d, 0x7f, 0x08, 0x6d, 0xd9, 0x04, 0x6f, 0x20, 0xdf, 0x81, 0xf1, 0x0f, 0x53, 0x75,
	0x9a, 0xfe, 0xfb, 0x75, 0x1f, 0x9b, 0x5c, 0x67, 0x77, 0xf3, 0xa7, 0x59, 0xd0, 0x6c, 0xd7, 0xcd,
	0x62, 0x68, 0xf1, 0x15, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x7d, 0xd1, 0xab, 0x6f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Sends a message to the chat room
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Streams back all other messages from the chat room
	Receive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ChatService_ReceiveClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Receive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ChatService_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/chat.ChatService/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ReceiveClient interface {
	Recv() (*ReceiveResponse, error)
	grpc.ClientStream
}

type chatServiceReceiveClient struct {
	grpc.ClientStream
}

func (x *chatServiceReceiveClient) Recv() (*ReceiveResponse, error) {
	m := new(ReceiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	// Sends a message to the chat room
	Send(context.Context, *SendRequest) (*empty.Empty, error)
	// Streams back all other messages from the chat room
	Receive(*empty.Empty, ChatService_ReceiveServer) error
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) Send(ctx context.Context, req *SendRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedChatServiceServer) Receive(req *empty.Empty, srv ChatService_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).Receive(m, &chatServiceReceiveServer{stream})
}

type ChatService_ReceiveServer interface {
	Send(*ReceiveResponse) error
	grpc.ServerStream
}

type chatServiceReceiveServer struct {
	grpc.ServerStream
}

func (x *chatServiceReceiveServer) Send(m *ReceiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ChatService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _ChatService_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/chat.proto",
}
